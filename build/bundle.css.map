{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Food.svelte",
    "../../SnakeBody.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Snake from \"./Snake.svelte\";\n  import Food from \"./Food.svelte\";\n  let direction = \"right\";\n  const height = 50;\n  const width = 50;\n\n  let foodLeft = 500;\n  let foodTop = 300;\n\n  let snakePositions = [];\n  reset();\n\n  $: score = snakePositions.length - 3;\n\n  setInterval(() => {\n    snakePositions.pop();\n    let { left, top } = snakePositions[0];\n\n    if (direction === \"right\") {\n      left += 50;\n    }\n    if (direction === \"left\") {\n      left -= 50;\n    }\n\n    if (direction === \"up\") {\n      top -= 50;\n    }\n\n    if (direction === \"down\") {\n      top += 50;\n    }\n\n    if (isCollide({ left: foodLeft, top: foodTop }, snakePositions[0])) {\n      snakePositions.push(snakePositions[snakePositions.length - 1]);\n      foodLeft = Math.ceil(Math.random() * 19) * 50;\n      foodTop = Math.ceil(Math.random() * 13) * 50;\n    }\n\n    snakePositions = [{ top, left }, ...snakePositions];\n\n    if (isGameOver()) {\n      //alert(\"Game over\");\n      reset();\n    }\n  }, 200);\n\n  function isCollide(a, b) {\n    return !(\n      a.top + 0 < b.top ||\n      a.top > b.top + 0 ||\n      a.left + 0 < b.left ||\n      a.left > b.left + 0\n    );\n  }\n\n  function isGameOver() {\n    const head = snakePositions[0];\n    const isSnakeTouchingItSelf = snakePositions\n      .slice(1)\n      .reduce((prev, next) => {\n        return prev || isCollide(next, head);\n      }, false);\n\n    return (\n      head.left < 0 ||\n      head.top < 0 ||\n      head.left > 950 ||\n      head.top > 650 ||\n      isSnakeTouchingItSelf\n    );\n  }\n\n  function reset() {\n    direction = \"right\";\n    foodLeft = Math.ceil(Math.random() * 19) * 50;\n    foodTop = Math.ceil(Math.random() * 13) * 50;\n    snakePositions = [\n      {\n        left: 100,\n        top: 0\n      },\n      {\n        left: 50,\n        top: 0\n      },\n      {\n        left: 0,\n        top: 0\n      }\n    ];\n  }\n\n  function onKeyboardEvent(e) {\n    const { keyCode } = e;\n    if (keyCode === 38) {\n      direction = \"up\";\n    } else if (keyCode === 39) {\n      direction = \"right\";\n    } else if (keyCode === 37) {\n      direction = \"left\";\n    } else if (keyCode === 40) {\n      direction = \"down\";\n    }\n  }\n</script>\n\n<style>\n  main {\n    width: 1000px;\n    height: 700px;\n    border: solid black 1px;\n    position: relative;\n    margin: 20px auto;\n    background-image: url(\"../background.jpg\");\n    background-size: cover;\n  }\n  h2,\n  h1 {\n    text-align: center;\n  }\n</style>\n\n<h1>Snake Game</h1>\n<main>\n  <Snake {direction} {width} {height} bind:snakePositions />\n  <Food top={foodTop} left={foodLeft} />\n</main>\n<h2>Score {score}</h2>\n<svelte:window on:keydown={onKeyboardEvent} />\n",
    "<script>\n  export let left = 100;\n  export let top = 200;\n</script>\n\n<style>\n  .food {\n    width: 50px;\n    height: 50px;\n    position: absolute;\n    border: solid black 1px;\n    background-color: red;\n    border-radius: 50%;\n    z-index: 0;\n  }\n</style>\n\n<div style=\"left: {left}px; top: {top}px;\" class=\"food\" />\n",
    "<script>\n  export let top;\n  export let left;\n  export let width;\n  export let height;\n  export let isHead = false;\n  export let direction;\n</script>\n\n<style>\n  .snake-body {\n    background-color: green;\n    border: black 1px solid;\n    position: absolute;\n    z-index: 3;\n  }\n  .eyes {\n    position: absolute;\n    background-color: orange;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n  }\n  #leftEye {\n    left: 10px;\n    top: 2px;\n  }\n  #rightEye {\n    left: 10px;\n    bottom: 2px;\n  }\n  .snake-body.right {\n    transform: rotate(0deg);\n  }\n  .snake-body.left {\n    transform: rotate(180deg);\n  }\n  .snake-body.up {\n    transform: rotate(90deg);\n  }\n  .snake-body.down {\n    transform: rotate(90deg);\n  }\n</style>\n\n<div\n  style=\"left: {left}px; top: {top}px; width: {width}px; height: {height}px;\"\n  class=\"snake-body {direction}\">\n  {#if isHead}\n    <div id=\"leftEye\" class=\"eyes\" />\n    <div id=\"rightEye\" class=\"eyes\" />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA6GE,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,CAC1C,eAAe,CAAE,KAAK,AACxB,CAAC,AACD,iBAAE,CACF,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,AACpB,CAAC;ACnHD,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,gBAAgB,CAAE,GAAG,CACrB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,AACZ,CAAC;ACJD,WAAW,cAAC,CAAC,AACX,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,KAAK,cAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,MAAM,CACxB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,IAAI,CAAE,IAAI,CACV,GAAG,CAAE,GAAG,AACV,CAAC,AACD,SAAS,cAAC,CAAC,AACT,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AACD,WAAW,MAAM,cAAC,CAAC,AACjB,SAAS,CAAE,OAAO,IAAI,CAAC,AACzB,CAAC,AACD,WAAW,KAAK,cAAC,CAAC,AAChB,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,GAAG,cAAC,CAAC,AACd,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC,AACD,WAAW,KAAK,cAAC,CAAC,AAChB,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC"
}